{"version":3,"sources":["Components/IngredientsMatchPage.js","Components/SummaryView.js","Components/ItemIngredients.js","Components/IngredientsTagPage.js","Components/AboutPage.js","App.js","reportWebVitals.js","index.js"],"names":["IngredientsMatchPage","props","state","leftInputString","leftInputArray","rightInputString","rightInputArray","itemFlagFormatter","bind","convertStringToArray","drawLines","handleLeftInput","handleRightInput","this","setState","thisItem","flaggedItemsArray","i","length","toLowerCase","style","backgroundColor","borderColor","borderStyle","includes","listAsString","split","replaceAll","trimmed","push","trim","event","target","value","a","b","matchingIndex","j","Fragment","id","placeholder","onChange","onClick","className","map","key","index","start","end","curveness","color","strokeWidth","showHead","headSize","Component","SummaryView","wanted","flagged","potentialFlag","inputArray","wantedItemsArray","ItemIngredients","undefined","IngredientsTagPage","c","wantedItemsString","flaggedItemsString","handleInput","handleWantedItems","handleFlaggedItems","inputString","AboutPage","App","pageTag","pageMatch","pageAbout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e035e405.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport Xarrow, {useXarrow, xarrowPropsType, Xwrapper} from 'react-xarrows';\r\nimport './../App.css';\r\n\r\n\r\nclass IngredientsMatchPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      leftInputString: \"\",\r\n      leftInputArray: [],\r\n      rightInputString: \"\",\r\n      rightInputArray: []\r\n\r\n    };\r\n    this.itemFlagFormatter = this.itemFlagFormatter.bind(this);\r\n    this.convertStringToArray = this.convertStringToArray.bind(this);\r\n    this.drawLines = this.drawLines.bind(this);\r\n    this.handleLeftInput = this.handleLeftInput.bind(this);\r\n    this.handleRightInput = this.handleRightInput.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ \r\n      leftInputArray: [\"Sodium Chloride\", \"Sodium Citrate\", \"Citric Acid\", \"Sodium Laureth Sulfate\", \"Sodium Lauryl Sulfate\", \"fragrance\"],\r\n      rightInputArray: [\"Sodium Citrate\", \"Citric not Acid\", \"Sodium Lauryl Sulfate\", \"oil\", \"Sodium Chloride\", \"Sodium Laureth Sulfate\"]\r\n    });\r\n  }\r\n\r\n  itemFlagFormatter(thisItem, flaggedItemsArray) {\r\n    for (let i = 0; i < flaggedItemsArray.length; i++) {\r\n      if (thisItem.toLowerCase() == flaggedItemsArray[i].toLowerCase()) {\r\n        //exact matches\r\n        return <div style={{backgroundColor: \"lightblue\", borderColor: \"red\", borderStyle: \"solid\"}}>{thisItem}</div>;\r\n      } else if (thisItem.toLowerCase().includes(flaggedItemsArray[i].toLowerCase())) {\r\n        //contains matching phrase\r\n        return <div style={{backgroundColor: \"yellow\", borderColor: \"orange\", borderStyle: \"solid\"}}>{thisItem}</div>;\r\n      }\r\n    }\r\n    return <div>{thisItem}</div>;\r\n  }\r\n\r\n\r\n  convertStringToArray(listAsString) {\r\n    var replaceFullstop = listAsString.replaceAll('.', ' ');\r\n    var split = replaceFullstop.split(\",\"); \r\n    var trimmed = [];\r\n\r\n    for (let i = 0; i < split.length; i++) {\r\n      trimmed.push(split[i].trim());\r\n    }\r\n    return trimmed;\r\n  }\r\n\r\n\r\n  handleLeftInput(event) {\r\n    this.setState({ leftInputString: event.target.value });\r\n  }\r\n\r\n\r\n  handleRightInput(event) {\r\n    this.setState({ rightInputString: event.target.value });\r\n  }\r\n\r\n  drawLines() {\r\n    // var myLine = new LeaderLine(\r\n    //   document.getElementById('start'),\r\n    //   document.getElementById('destination')\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    // var a = [\"Sodium Chloride\", \"Sodium Citrate\", \"Citric Acid\", \"Sodium Laureth Sulfate\", \"Sodium Lauryl Sulfate\", \"fragrance\"];\r\n    // var b = [\"Sodium Citrate\", \"Citric not Acid\", \"Sodium Lauryl Sulfate\", \"oil\", \"Sodium Chloride\", \"Sodium Laureth Sulfate\"];\r\n    var a = this.state.leftInputArray\r\n    var b = this.state.rightInputArray;\r\n    var matchingIndex = [];\r\n    for (var i = 0; i < a.length; i++) {\r\n      matchingIndex[i] = -1; //defaults from no match\r\n      for (var j = 0; j < b.length; j++) {\r\n        if (a[i].toLowerCase() == b[j].toLowerCase()) {\r\n          matchingIndex[i] = j;\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          \r\n        <div>  \r\n          <textarea \r\n              id=\"item-left\"\r\n              placeholder=\"paste the list of ingredients here\"\r\n              onChange={this.handleLeftInput}\r\n              ></textarea>\r\n        </div>\r\n        <div>\r\n          <textarea \r\n            id=\"item-right\"\r\n            placeholder=\"paste the list of ingredients here\"\r\n            onChange={this.handleRightInput}\r\n            ></textarea>\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            if (this.state.leftInputString != \"\" && this.state.rightInputString) {\r\n              this.setState({\r\n                leftInputArray: this.convertStringToArray(this.state.leftInputString),\r\n                rightInputArray: this.convertStringToArray(this.state.rightInputString)\r\n              });\r\n            }\r\n            \r\n          }}\r\n          >Match product ingredients</button>\r\n\r\n          <div>\r\n            <div className=\"ingredients-matching\" id=\"left\" >\r\n              {a.map((key, index) => <div className=\"ingredients\" id={\"left\" + index} >{key}</div>)}\r\n            </div>\r\n\r\n            {/* TODO: Insert the lines after both div sides have been drawn */}\r\n            <div className=\"ingredients-matching\" id=\"canvas\">\r\n              {matchingIndex.map((key, index) => {\r\n                if (key !== -1) {\r\n                  return <Xarrow start={\"left\" + index} end={\"right\" + key} \r\n                            curveness=\"0\" \r\n                            color=\"cornflowerblue\"\r\n                            strokeWidth=\"2\"\r\n                            showHead=\"false\"\r\n                            headSize=\"0\"\r\n                          />;\r\n                }\r\n                \r\n              })}\r\n            </div>\r\n            \r\n            <div className=\"ingredients-matching\" id=\"right\" >\r\n              {b.map((key, index) => <div className=\"ingredients\" id={\"right\" + index} >{key}</div>)}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* {matchingIndex.map(i => <div>{i}</div>)} */}\r\n\r\n\r\n\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default IngredientsMatchPage;\r\n","\r\nimport React, { Component } from 'react';\r\nimport './../App.css';\r\n\r\nclass SummaryView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    var wanted = 0;\r\n    var flagged = 0;\r\n    var potentialFlag = 0;\r\n\r\n    for (let i = 0; i < this.props.inputArray.length; i++) {\r\n      for (let j = 0; j < this.props.wantedItemsArray.length; j++) {\r\n        if (this.props.inputArray[i].toLowerCase() == (this.props.wantedItemsArray[j].toLowerCase())) {\r\n          wanted++;\r\n        }\r\n      }\r\n      for (let j = 0; j < this.props.flaggedItemsArray.length; j++) {\r\n        if (this.props.inputArray[i].toLowerCase() == (this.props.flaggedItemsArray[j].toLowerCase())) {\r\n          flagged++;\r\n        } else if (this.props.inputArray[i].toLowerCase().includes(this.props.flaggedItemsArray[j].toLowerCase())) {\r\n          potentialFlag++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"summary\">\r\n          {this.props.inputArray.length != 0\r\n          ? \r\n          <React.Fragment>\r\n            <div className=\"summary-stats\" id=\"stats-input\">\r\n              <h3>Total ingredients</h3>\r\n              <h2>{this.props.inputArray.length}</h2>\r\n            </div>\r\n            <div className=\"summary-stats\" id=\"stats-wanted\">\r\n              <h3>Desired ingredients</h3>\r\n              <h2>{wanted}</h2> \r\n              <p>out of {this.props.wantedItemsArray.length} found</p>\r\n            </div>\r\n            <div className=\"summary-stats\" id=\"stats-flagged\">\r\n              <h3>Flagged ingredients</h3>\r\n              <h2>{flagged}</h2>\r\n              <p>out of {this.props.flaggedItemsArray.length} flagged</p>\r\n              <p>({potentialFlag} potentially unwanted items)</p>\r\n            </div>\r\n          </React.Fragment>\r\n          : <p>Summary cannot be displayed until there is an ingredients list.</p>\r\n          }\r\n          \r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default SummaryView;\r\n","\r\nimport React, { Component } from 'react';\r\nimport './../App.css';\r\n\r\n\r\nclass ItemIngredients extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.itemFlagFormatter = this.itemFlagFormatter.bind(this);\r\n  }\r\n\r\n  itemFlagFormatter(thisItem) {\r\n    if (this.props.flaggedItemsArray !== undefined) {\r\n      for (let i = 0; i < this.props.flaggedItemsArray.length; i++) {\r\n        if (thisItem.toLowerCase() == this.props.flaggedItemsArray[i].toLowerCase()) {\r\n          //exact matches\r\n          return <div className=\"ingredients flagged\" style={{borderColor: \"red\"}}>{thisItem}</div>;\r\n        } else if (this.props.flaggedItemsArray[i] != \"\" && thisItem.toLowerCase().includes(this.props.flaggedItemsArray[i].toLowerCase())) {\r\n          //contains matching phrase\r\n          return <div className=\"ingredients flagged\" style={{borderColor: \"orange\"}}>{thisItem}</div>;\r\n        } \r\n      }\r\n    }\r\n    if (this.props.wantedItemsArray !== undefined) { \r\n      for (let i = 0; i < this.props.wantedItemsArray.length; i++) {\r\n        if (thisItem.toLowerCase() == (this.props.wantedItemsArray[i].toLowerCase())) {\r\n          //exact matches\r\n          return <div className=\"ingredients wanted\" style={{borderColor: \"green\"}}>{thisItem}</div>;\r\n        }\r\n      }\r\n    }\r\n    return <div className=\"ingredients\" style={{borderColor: \"aliceblue\"}}>{thisItem}</div>;\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.inputArray != undefined && this.props.inputArray.length > 0 &&\r\n        <div id=\"ingredients-list\">\r\n          {this.props.inputArray.map((i) => this.itemFlagFormatter(i))}\r\n        </div>\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default ItemIngredients;\r\n","import React, { Component } from 'react';\r\nimport SummaryView from './SummaryView';\r\nimport ItemIngredients from './ItemIngredients'\r\n\r\nclass IngredientsTagPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      c: \"\",\r\n      inputArray: [],\r\n      wantedItemsString: \"\",\r\n      wantedItemsArray: [],\r\n      flaggedItemsString: \"\",\r\n      flaggedItemsArray: [],\r\n    };\r\n    this.convertStringToArray = this.convertStringToArray.bind(this);\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleWantedItems = this.handleWantedItems.bind(this);\r\n    this.handleFlaggedItems = this.handleFlaggedItems.bind(this);\r\n  }\r\n\r\n\r\n  convertStringToArray(listAsString) {\r\n    var replaceFullstop = listAsString.replaceAll('.', ' ');\r\n    var split = replaceFullstop.split(\",\"); \r\n    var trimmed = [];\r\n\r\n    for (let i = 0; i < split.length; i++) {\r\n      trimmed.push(split[i].trim());\r\n    }\r\n    return trimmed;\r\n  }\r\n\r\n\r\n  handleInput(event) {\r\n    this.setState({ inputString: event.target.value });\r\n  }\r\n\r\n\r\n  handleWantedItems(event) {\r\n    this.setState({ wantedItemsString: event.target.value });\r\n  }\r\n\r\n\r\n  handleFlaggedItems(event) {\r\n    this.setState({ flaggedItemsString: event.target.value });\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <React.Fragment>\r\n      <div className=\"input\" id=\"input\">\r\n      <textarea \r\n        id=\"textarea-input\"\r\n        placeholder=\"paste the list of ingredients here\"\r\n        onChange={this.handleInput}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"input\" id=\"input-wanted\">\r\n        <textarea \r\n          id=\"textarea-input-wanted\"\r\n          placeholder=\"paste wanted ingredients here\"\r\n          onChange={this.handleWantedItems}\r\n          ></textarea>\r\n      </div>\r\n      <div className=\"input\" id=\"input-flagged\">\r\n        <textarea \r\n          id=\"textarea-input-flagged\"\r\n          placeholder=\"paste unwanted ingredients here\"\r\n          onChange={this.handleFlaggedItems}\r\n          ></textarea>\r\n      </div>\r\n      <button\r\n          onClick={() => {\r\n            if (this.state.inputString != \"\") {\r\n              this.setState({\r\n                inputArray: this.convertStringToArray(this.state.inputString),\r\n                wantedItemsArray: this.convertStringToArray(this.state.wantedItemsString),\r\n                flaggedItemsArray: this.convertStringToArray(this.state.flaggedItemsString)\r\n              });\r\n            }\r\n            \r\n          }}\r\n          >Tag my Ingredients</button>\r\n      <div id=\"result\">\r\n        <h3>Product Summary:</h3>\r\n        <SummaryView\r\n          inputArray = {this.state.inputArray}\r\n          flaggedItemsArray = {this.state.flaggedItemsArray}\r\n          wantedItemsArray = {this.state.wantedItemsArray}\r\n          />\r\n        <ItemIngredients\r\n          inputArray = {this.state.inputArray}\r\n          flaggedItemsArray = {this.state.flaggedItemsArray}\r\n          wantedItemsArray = {this.state.wantedItemsArray}\r\n        />\r\n      </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default IngredientsTagPage;\r\n","import React, { Component } from 'react';\r\n\r\nclass AboutPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <React.Fragment>\r\n        \r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default AboutPage;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport IngredientsMatchPage from './Components/IngredientsMatchPage';\nimport IngredientsTagPage from './Components/IngredientsTagPage';\nimport AboutPage from './Components/AboutPage';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pageTag: true,\n      pageMatch: true,\n      pageAbout: false\n    };\n  }\n\n  render() {\n    \n    return (\n      <React.Fragment>\n        <div>Better Labels</div>\n        {this.state.pageTag && <IngredientsTagPage/>}\n        {this.state.pageMatch && <IngredientsMatchPage/>}\n        {this.state.pageAbout && <AboutPage/>}\n\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}